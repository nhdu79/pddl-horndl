From: Duy Nhu <duy.nhu.040197@gmail.com>
diff -Naur clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandQuery.java clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandQuery.java
--- clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandQuery.java	2016-05-23 19:11:17.000000000 +0200
+++ clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandQuery.java	2021-07-06 12:16:41.000000000 +0200
@@ -61,7 +61,8 @@

 		qaHornSHIQ.setOntologies(ontologies);

-		CQ cq = parseCQ(ontologies);
+		List<CQ> cqList = parseCQ(ontologies);
+		CQ cq = cqList.get(0);

 		qaHornSHIQ.setDatalogFileName(this.datalog);
 		qaHornSHIQ.setQueryRewriter(this.getRewriter());
@@ -103,7 +104,6 @@
 	}

 	/**
-	 * @param qaHornSHIQ
 	 * @param startTime
 	 * @param endTime
 	 */
diff -Naur clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandRewrite.java clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandRewrite.java
--- clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandRewrite.java	2016-05-23 19:11:17.000000000 +0200
+++ clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandRewrite.java	2021-07-06 12:16:41.000000000 +0200
@@ -8,6 +8,8 @@
 import org.semanticweb.clipper.hornshiq.rule.CQ;
 import org.semanticweb.owlapi.model.OWLOntology;

+import java.util.ArrayList;
+import java.util.List;
 import java.util.Set;

 @Parameters(commandNames = { "rewrite" }, separators = "=", commandDescription = "rewrite the query w.r.t. the ontology, and generate a datalog program")
@@ -44,9 +46,10 @@
 	}

 	@Override
-	void exec() {
-		System.setProperty("entityExpansionLimit", "512000");
+	void exec(){

+		System.setProperty("entityExpansionLimit", "512000");
+		List<CQ> cqList = new ArrayList<>();
 		QAHornSHIQ qaHornSHIQ = new QAHornSHIQ();
 		// note that naming strategy should be set after create new QAHornSHIQ
 		// ClipperManager.getInstance().setNamingStrategy(
@@ -60,16 +63,16 @@

 		qaHornSHIQ.setOntologies(ontologies);

-		if (rewritingOntologyAndQuery || rewritingTBoxAndQuery || this.cqFile != null || this.sparqlFile != null || this.sparqlString != null) {
+		if (rewritingOntologyAndQuery || rewritingTBoxAndQuery || this.cqFile != null || this.sparqlFile != null || this.sparqlString != null || this.cqFiles != null) {

-			CQ cq = parseCQ(ontologies);
+			cqList = parseCQ(ontologies);
+			CQ cq = cqList.get(0);

 			qaHornSHIQ.setQuery(cq);
 		}
 		// TODO: only consider related rules

 		qaHornSHIQ.setDatalogFileName(datalog);
-
 		if (this.isRewritingOntologyOnly()) { // -o
 			qaHornSHIQ.generateOntologyDatalog();
 		} else if (this.isRewritingABoxOnly()) { // -a
@@ -80,6 +83,8 @@
 			qaHornSHIQ.generateQueriesAndCompletionRulesDatalog();
 		} else if (this.isRewritingOntologyAndQuery()) { // -oq
 			qaHornSHIQ.generateDatalog();
+		} else if(this.cqFiles != null || this.isRewriteOntologyAndMultipleQueries()){
+			qaHornSHIQ.rewriteCQs(cqList);
 		} else { // rewrite everything by default
 			qaHornSHIQ.generateDatalog();
 		}
diff -Naur clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandSparqlToSQL.java clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandSparqlToSQL.java
--- clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandSparqlToSQL.java	2016-05-23 19:11:17.000000000 +0200
+++ clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/CommandSparqlToSQL.java	2021-07-06 12:16:41.000000000 +0200
@@ -6,6 +6,7 @@
 import org.semanticweb.clipper.util.Ucq2SqlConverter;
 import org.semanticweb.owlapi.model.OWLOntology;

+import java.util.List;
 import java.util.Set;

 @Parameters(commandNames = { "sparql2sql" },
@@ -24,7 +25,8 @@
 	@Override
 	void exec() {
 		Set<OWLOntology> ontologies = loadOntologies();
-		CQ cq = parseCQ(ontologies);
+		List<CQ> cqList = parseCQ(ontologies);
+		CQ cq = cqList.get(0);
 		String sql = new Ucq2SqlConverter().convert(cq);
 		System.out.println(sql);
 	}
diff -Naur clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/ReasoningCommandBase.java clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/ReasoningCommandBase.java
--- clipper-old/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/ReasoningCommandBase.java	2016-05-23 19:11:17.000000000 +0200
+++ clipper/clipper-cli/src/main/java/org/semanticweb/clipper/hornshiq/cli/ReasoningCommandBase.java	2021-07-06 12:16:41.000000000 +0200
@@ -13,13 +13,14 @@
 import org.semanticweb.owlapi.model.OWLOntology;
 import org.semanticweb.owlapi.model.OWLOntologyCreationException;

-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
+import java.io.*;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;

 /**
  * Common base class for CommandQuery and CommandRewrite
@@ -47,17 +48,31 @@
 	@Parameter(names = { "-r", "-rewriter" }, description = "rewriter", hidden = true)
 	protected String rewriter = "new";

+
+
+	/**
+	 * author Steffen Breuer
+	 */
+	@Parameter(names = {"-ontology-and-multiple-queries-in-file", "-mqf"}, description = "rewrite ontology (= TBox + ABox) and multiple queries in the same file")
+	private boolean rewriteOntologyAndMultipleQueries;
+
+	@Parameter(names = "-mcq", description = "<query1.cq> ... <queryk.cq> query files in CQ format")
+	protected List<String> cqFiles;
+
 	public ReasoningCommandBase(JCommander jc) {
 		super(jc);
 		jc.addCommand(this);
 	}

-	protected CQ parseCQ(Set<OWLOntology> ontologies) {
+	protected List<CQ> parseCQ(Set<OWLOntology> ontologies) {
 		CQ cq = null;
+		List<CQ> cqList = new ArrayList<>();
+

         if(sparqlString!=null){
             Query query = QueryFactory.create(sparqlString);
             cq = new SparqlToCQConverter().compileQuery(query);
+            cqList.add(cq);
         } else if (sparqlFile != null) {
 			try {
                 FileReader reader = new FileReader(new File(sparqlFile));
@@ -67,29 +82,56 @@
                 Query query = QueryFactory.create(queryString);

                 cq = new SparqlToCQConverter().compileQuery(query);
-
+				cqList.add(cq);
                 reader.close();

 			} catch (IOException e) {
 				e.printStackTrace();
 			}
-		} else if (cqFile != null) {
+		} else if (cqFile != null && !isRewriteOntologyAndMultipleQueries()) {
 			CQParser parser;
 			try {
 				parser = new CQParser(new File(cqFile), ontologies);
 				cq = parser.parse();
+				cqList.add(cq);
 			} catch (FileNotFoundException e) {
 				e.printStackTrace();
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
-		} else {
+		} else if(cqFiles != null){
+        	CQParser parser;
+        	try {
+        		for(String file: cqFiles){
+					parser = new CQParser(new File(file), ontologies);
+					cq = parser.parse();
+
+					//ADDED
+					cqList.add(cq);
+				}
+			} catch (IOException e){
+				e.printStackTrace();
+			}
+		} else if(this.isRewriteOntologyAndMultipleQueries()){
+        	try {
+				List<String> queries = loadMultipleQueries(cqFile);
+				for(String query : queries){
+					CQParser parser = new CQParser(this.createInputStream(query), ontologies);
+					cq = parser.parse();
+					cqList.add(cq);
+				}
+			} catch (IOException e) {
+				e.printStackTrace();
+			}
+		}
+        else {
 			throw new IllegalStateException();
 		}
-
-		return cq;
+		return cqList;
 	}

+
+
 	protected Set<OWLOntology> loadOntologies() {
 		Set<OWLOntology> ontologies = new HashSet<OWLOntology>();

@@ -107,8 +149,27 @@
 		return ontologies;
 	}

+
 	protected String errorMessage;

+
+
+	/**
+	 * @author Steffen Breuer
+	 * @param filePath
+	 * @return
+	 * @throws IOException
+	 */
+	private List<String> loadMultipleQueries(String filePath) throws IOException {
+		BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath), StandardCharsets.UTF_8));
+		return reader.lines().collect(Collectors.toList());
+	}
+
+	private InputStream createInputStream(String cqString){
+		return new ByteArrayInputStream(cqString.getBytes());
+	}
+
+
     public List<String> getOntologyFiles() {
         return this.ontologyFiles;
     }
@@ -136,4 +197,11 @@
     public String getErrorMessage() {
         return this.errorMessage;
     }
+
+    public List<String> getCqFiles(){ return this.cqFiles;}
+
+    public boolean isRewriteOntologyAndMultipleQueries() {
+		return this.rewriteOntologyAndMultipleQueries;
+	}
+
 }
diff -Naur clipper-old/clipper-reasoner/src/main/java/org/semanticweb/clipper/hornshiq/queryanswering/QAHornSHIQ.java clipper/clipper-reasoner/src/main/java/org/semanticweb/clipper/hornshiq/queryanswering/QAHornSHIQ.java
--- clipper-old/clipper-reasoner/src/main/java/org/semanticweb/clipper/hornshiq/queryanswering/QAHornSHIQ.java	2016-05-23 19:11:17.000000000 +0200
+++ clipper/clipper-reasoner/src/main/java/org/semanticweb/clipper/hornshiq/queryanswering/QAHornSHIQ.java	2021-07-06 12:16:41.000000000 +0200
@@ -118,7 +118,7 @@

 			reduceOntologyToDatalog(tb);

-			rewriteQuery(tb);
+			 rewriteQuery(tb);

 			reduceRewrittenQueriesToDatalog(tb);

@@ -153,7 +153,6 @@

 		TBoxReasoner tb = saturateTBox();

-
 		ReductionToDatalog reduction = new ReductionToDatalog(clipperOntology, cqFormatter);
 		// reduction.setNamingStrategy(this.namingStrategy);
 		reduction.setCoreImps(tb.getImpContainer().getImps());
@@ -208,9 +207,46 @@
 		out.close();
 	}

+
+	/**
+	 * @author Steffen Breuer
+	 **/
+	public Collection<String> rewriteCQs(Collection<CQ> rawQueries) {
+		Collection<CQ> rewrittenQueries = new HashSet<>();
+
+		try {
+			preprocessOntologies();
+
+			TBoxReasoner tb = saturateTBox();
+
+			reduceOntologyToDatalog(tb);
+			QueryRewriter queryRewriter = createQueryRewriter(clipperOntology, tb);
+
+			for (CQ rawQuery : rawQueries) {
+				Collection<CQ> rewrittenQuery = queryRewriter.rewrite(rawQuery);
+				rewrittenQueries.addAll(rewrittenQuery);
+			/*for (CQ unnamedQuery : rewrittenQuery){
+				String namedQuery = this.cqFormatter.formatQuery(unnamedQuery);
+				rewrittenQueries.add(namedQuery);
+			}*/
+				this.rewrittenQueries = rewrittenQueries;
+			}
+
+			reduceRewrittenQueriesToDatalog(tb);
+
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+		//return rewrittenQueries;
+		return null;
+	}
+
+
+
 	/**
 	 * @param tb
 	 */
+
 	private void rewriteQuery(TBoxReasoner tb) {
 		QueryRewriter qr = createQueryRewriter(clipperOntology, tb);

