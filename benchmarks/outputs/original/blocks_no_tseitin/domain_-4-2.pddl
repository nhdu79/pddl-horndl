(define (domain Blocks)
(:constants
  T B D C A - object)
(:predicates
  (onblock ?x ?y - object)
  (ontable ?x ?y - object)
  (on ?x ?y - object)
  (block ?x - object)
  (table ?x - object)
  (blocked ?x - object)
  (holding ?x - object)
  (DATALOG_BLOCKED ?x0 - object)
  (DATALOG_ONBLOCKSOMETHING ?x0 - object)
  (DATALOG_ON ?x0 ?x1 - object)
  (DATALOG_QUERY0 )
  (DATALOG_BLOCK ?x0 - object)
  (DATALOG_TABLE ?x0 - object)
  (DATALOG_ONTABLESOMETHING ?x0 - object)
  (DATALOG_INCONSISTENT ))
(:derived (DATALOG_BLOCKED ?x0 - object)
          (blocked ?x0))
(:derived (DATALOG_BLOCKED ?x0 - object)
          (holding ?x0))
(:derived (DATALOG_ONBLOCKSOMETHING ?x0 - object)
          (exists (?y0 - object) (onblock ?x0 ?y0)))
(:derived (DATALOG_ON ?x0 ?x1 - object)
          (on ?x0 ?x1))
(:derived (DATALOG_ON ?x0 ?x1 - object)
          (ontable ?x0 ?x1))
(:derived (DATALOG_QUERY0 )
          (exists (?y0 - object) (holding ?y0)))
(:derived (DATALOG_BLOCK ?x0 - object)
          (block ?x0))
(:derived (DATALOG_BLOCK ?x0 - object)
          (holding ?x0))
(:derived (DATALOG_BLOCK ?x0 - object)
          (exists (?y0 - object) (DATALOG_ON ?x0 ?y0)))
(:derived (DATALOG_BLOCK ?x0 - object)
          (exists (?y0 - object) (onblock ?y0 ?x0)))
(:derived (DATALOG_TABLE ?x0 - object)
          (table ?x0))
(:derived (DATALOG_TABLE ?x0 - object)
          (exists (?y0 - object) (ontable ?y0 ?x0)))
(:derived (DATALOG_ON ?x0 ?x1 - object)
          (onblock ?x0 ?x1))
(:derived (DATALOG_ONTABLESOMETHING ?x0 - object)
          (exists (?y0 - object) (ontable ?x0 ?y0)))
(:derived (DATALOG_INCONSISTENT )
          (exists (?y0 - object) (and (DATALOG_BLOCK ?y0) (DATALOG_TABLE ?y0))))
(:derived (DATALOG_INCONSISTENT )
          (exists (?y0 ?y1 ?y2 - object) (and (onblock ?y0 ?y1) (onblock ?y0 ?y2) (not (= ?y1 ?y2)))))
(:derived (DATALOG_INCONSISTENT )
          (exists (?y0 - object) (and (DATALOG_ONBLOCKSOMETHING ?y0) (DATALOG_ONTABLESOMETHING ?y0))))
(:derived (DATALOG_BLOCKED ?x0 - object)
          (exists (?y0 - object) (onblock ?y0 ?x0)))
(:action pick-up
  :parameters (?x ?y - object)
  :precondition (and (DATALOG_ON ?x ?y) (not (DATALOG_BLOCKED ?x)) (not (DATALOG_INCONSISTENT)) (not (DATALOG_QUERY0)))
  :effect (and (not (on ?x ?y)) (holding ?x) (not (blocked ?y))))
(:action put-down
  :parameters (?x ?y - object)
  :precondition (and (holding ?x) (not (DATALOG_BLOCKED ?y)) (not (DATALOG_INCONSISTENT)))
  :effect (and (not (holding ?x)) (not (blocked ?x)) (when (DATALOG_TABLE ?y) (ontable ?x ?y)) (when (DATALOG_BLOCK ?y) (onblock ?x ?y))))
)